{
    "name": "demo",
    "$schema": "../../node_modules/nx/schemas/project-schema.json",
    "sourceRoot": "projects/demo/src",
    "projectType": "application",
    "prefix": "app",
    "implicitDependencies": ["!testing"],
    "targets": {
        "i18n": {
            "outputs": ["{workspaceRoot}/dist/i18n"],
            "executor": "nx:run-commands",
            "options": {
                "command": "nx build i18n"
            }
        },
        "build": {
            "executor": "@angular-builders/custom-webpack:browser",
            "outputs": ["{workspaceRoot}/dist/{projectName}"],
            "dependsOn": [
                {
                    "target": "i18n",
                    "params": "ignore"
                }
            ],
            "options": {
                "customWebpackConfig": {
                    "path": "projects/{projectName}/webpack.config.ts"
                },
                "outputPath": "dist/{projectName}/browser",
                "index": "projects/{projectName}/src/index.html",
                "main": "projects/{projectName}/src/main.browser.ts",
                "polyfills": "projects/{projectName}/src/polyfills.ts",
                "tsConfig": "projects/{projectName}/tsconfig.app.json",
                "assets": [
                    "{projectRoot}/src/404.html",
                    {
                        "glob": "**/*",
                        "input": "projects/demo/src/assets/",
                        "output": "./assets/"
                    },
                    {
                        "glob": "**/*",
                        "input": "projects/icons/src",
                        "output": "assets/taiga-ui/icons"
                    }
                ],
                "baseHref": "./",
                "styles": [
                    "{projectRoot}/src/normalize.less",
                    "{projectRoot}/src/styles.less",
                    "{projectRoot}/src/styles.scss"
                ],
                "scripts": [],
                "allowedCommonJsDependencies": ["text-mask-core", "markdown-it"],
                "vendorChunk": true,
                "extractLicenses": false,
                "buildOptimizer": false,
                "sourceMap": true,
                "optimization": false,
                "namedChunks": true
            },
            "configurations": {
                "production": {
                    "fileReplacements": [
                        {
                            "replace": "{projectRoot}/src/environments/environment.ts",
                            "with": "{projectRoot}/src/environments/environment.prod.ts"
                        }
                    ],
                    "optimization": true,
                    "outputHashing": "all",
                    "sourceMap": false,
                    "namedChunks": false,
                    "buildOptimizer": true,
                    "statsJson": false,
                    "progress": false
                },
                "next": {
                    "fileReplacements": [
                        {
                            "replace": "{projectRoot}/src/environments/environment.ts",
                            "with": "{projectRoot}/src/environments/environment.prod.ts"
                        }
                    ],
                    "optimization": true,
                    "outputPath": "dist/demo/browser/next",
                    "outputHashing": "all",
                    "sourceMap": false,
                    "namedChunks": false,
                    "buildOptimizer": true,
                    "statsJson": false,
                    "progress": false
                },
                "development": {
                    "baseHref": "/"
                },
                "def": {
                    "baseHref": "/",
                    "fileReplacements": [
                        {
                            "replace": "{projectRoot}/src/emulate/change-detection-strategy.ts",
                            "with": "{projectRoot}/src/emulate/change-detection-strategy.def.ts"
                        }
                    ]
                },
                "shadow": {
                    "baseHref": "/",
                    "fileReplacements": [
                        {
                            "replace": "{projectRoot}/src/emulate/view-encapsulation.ts",
                            "with": "{projectRoot}/src/emulate/view-encapsulation.shadow.ts"
                        }
                    ]
                },
                "fast": {
                    "baseHref": "/",
                    "sourceMap": false,
                    "namedChunks": false,
                    "statsJson": false
                },
                "coalescing": {
                    "baseHref": "/",
                    "fileReplacements": [
                        {
                            "replace": "{projectRoot}/src/emulate/ng-zone-options.ts",
                            "with": "{projectRoot}/src/emulate/ng-zone-options.coalescing.ts"
                        }
                    ]
                }
            },
            "defaultConfiguration": "production"
        },
        "mkcert": {
            "executor": "nx:run-commands",
            "options": {
                "parallel": false,
                "commands": [
                    "echo \"mkcert is a simple tool for making locally-trusted development certificates\"",
                    "echo \"Read about installation and more: https://github.com/FiloSottile/mkcert\"",
                    "echo ------",
                    "mkcert -install",
                    "mkdir -p .ssl",
                    "mkcert -key-file .ssl/localhost-key.pem -cert-file .ssl/localhost.pem localhost 127.0.0.1 $(ifconfig | grep \"inet \" | grep -Fv 127.0.0.1 | awk '{print $2}' | tr '\\n' ' ') ::1"
                ]
            }
        },
        "serve": {
            "executor": "@angular-builders/custom-webpack:dev-server",
            "dependsOn": [
                {
                    "target": "i18n",
                    "params": "ignore"
                }
            ],
            "options": {
                "port": 3333,
                "sslCert": ".ssl/localhost.pem",
                "sslKey": ".ssl/localhost-key.pem"
            },
            "configurations": {
                "production": {
                    "browserTarget": "{projectName}:build:production",
                    "aot": true
                },
                "ru": {
                    "browserTarget": "{projectName}:build:ru"
                },
                "development": {
                    "browserTarget": "{projectName}:build:development"
                },
                "def": {
                    "browserTarget": "{projectName}:build:def"
                },
                "fast": {
                    "browserTarget": "{projectName}:build:fast"
                },
                "shadow": {
                    "browserTarget": "{projectName}:build:shadow"
                },
                "coalescing": {
                    "browserTarget": "{projectName}:build:coalescing"
                }
            },
            "defaultConfiguration": "development"
        },
        "serve-ssl": {
            "executor": "nx:run-commands",
            "options": {
                "command": "nx mkcert {projectName} && nx serve {projectName} --ssl --open --host 0.0.0.0 --disable-host-check"
            }
        },
        "serve-ssr": {
            "executor": "@nguniversal/builders:ssr-dev-server",
            "options": {},
            "configurations": {
                "production": {
                    "browserTarget": "{projectName}:build:production",
                    "serverTarget": "{projectName}:server:production"
                },
                "development": {
                    "serverTarget": "{projectName}:server:development",
                    "browserTarget": "{projectName}:build:development"
                }
            },
            "dependsOn": [
                {
                    "target": "i18n",
                    "params": "ignore"
                }
            ],
            "defaultConfiguration": "development"
        },
        "serve-compiled": {
            "executor": "nx:run-commands",
            "options": {
                "command": "angular-http-server -p {args.port} --silent --path {args.path} & npx wait-on http://localhost:{args.port} --timeout 5000",
                "forwardAllArgs": false
            }
        },
        "server": {
            "executor": "@angular-builders/custom-webpack:server",
            "options": {
                "customWebpackConfig": {
                    "path": "{projectRoot}/webpack.server.config.ts"
                },
                "outputPath": "dist/{projectName}/server",
                "main": "{projectRoot}/server.ts",
                "tsConfig": "{projectRoot}/tsconfig.server.json",
                "sourceMap": true,
                "optimization": false
            },
            "configurations": {
                "production": {
                    "outputHashing": "media",
                    "sourceMap": false,
                    "optimization": true
                },
                "development": {}
            },
            "defaultConfiguration": "production"
        },
        "prerender": {
            "executor": "@nguniversal/builders:prerender",
            "outputs": ["{workspaceRoot}/dist/{projectName}"],
            "options": {
                "browserTarget": "{projectName}:build:production",
                "serverTarget": "{projectName}:server:production",
                "routesFile": "projects/{projectName}/routes.txt",
                "guessRoutes": false
            },
            "configurations": {
                "production": {}
            },
            "dependsOn": [
                {
                    "target": "i18n",
                    "params": "ignore"
                }
            ],
            "defaultConfiguration": "production"
        },
        "test": {
            "executor": "@nx/jest:jest",
            "outputs": ["{workspaceRoot}/coverage/{projectName}"],
            "options": {
                "jestConfig": "jest.config.ts",
                "collectCoverage": false,
                "testMatch": ["<rootDir>/{projectRoot}/**/*.spec.ts"]
            }
        }
    }
}
