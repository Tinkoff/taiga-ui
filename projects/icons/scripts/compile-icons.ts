import {readdirSync, readFileSync, unlinkSync, writeFileSync} from 'fs';
import {rollup, RollupOptions} from 'rollup';

import {rollupSvgo} from './rollup-svgo';

const prettier = require('prettier');
const typescript = require('rollup-plugin-typescript2');

const projectPath = process.argv[2] || 'projects/icons';
const allToCompilePath = `${projectPath}/all-to-compile.ts`;
const iconsSrc = `${projectPath}/src/`;

const banner = `
/**
 * @description:
 * DO NOT CHANGE THIS FILE. AUTOGENERATED
 */
`;

const inputOptions: RollupOptions = {
    input: allToCompilePath,
    output: {preferConst: true},
    plugins: [
        typescript({cacheRoot: 'node_modules/.cache/.rpt2_cache'}),
        rollupSvgo({
            include: '**/*.svg',
            options: {
                plugins: [
                    {removeViewBox: false},
                    {collapseGroups: false},
                    {cleanupIDs: false},
                    {removeUnknownsAndDefaults: false},
                ],
            },
        }),
    ],
};

(async function build(): Promise<void> {
    prepareAllToCompileFile();
    await convertAllCompileFileToAllFile();
    deleteAllToCompileFile();
})();

async function convertAllCompileFileToAllFile() {
    const file = `${projectPath}/all.ts`;
    const bundle = await rollup(inputOptions);

    await bundle.write({
        file,
        banner,
        format: 'es',
        preferConst: true,
    });

    const bundledBody = readFileSync(file, 'utf8');
    const options = prettier.resolveConfig.sync('prettier.config.js');
    const formatted = prettier.format(bundledBody, {...options, parser: 'typescript'});

    writeFileSync(file, formatted);
}

function prepareAllToCompileFile() {
    const icons = readdirSync(iconsSrc).filter(file => file.split('.').pop() === 'svg');

    let importDeclarations = '';
    let exportDeclarations = '';

    for (const iconPath of icons) {
        const fileName = iconPath.split('.').shift();

        importDeclarations += `import ${fileName} from './src/${fileName}.svg';\n`;
        exportDeclarations += `${fileName}, `;
    }

    writeFileSync(
        allToCompilePath,
        `${importDeclarations} \n export { ${exportDeclarations} }`,
    );
}

function deleteAllToCompileFile() {
    unlinkSync(allToCompilePath);
}
